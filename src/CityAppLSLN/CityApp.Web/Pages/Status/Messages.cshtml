@page
@using CityApp.Engine
@using Microsoft.AspNetCore.Authentication
@model CityApp.Web.Pages.Status.MessagesPageModel
@inject IUserDataContext UserDataContext
@{
    var fullname = UserDataContext.GetCurrentUser().Fullname;
    ViewData["Title"] = "Messages for " + fullname;
}

<h1>
    Status messages
</h1>
@if (Model.MessageModel.Messages.Any())
{
    <table class="table table-hover">
        <thead>
        <tr>
            <th scope="col">Message</th>
            <th scope="col">Entry date</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var searchModel in Model.MessageModel.Messages)
        {
            <tr>
                <td>
                    @searchModel.Message
                </td>
                <td>
                    @searchModel.EntryDate
                </td>
            </tr>
        }
        </tbody>
        <tfoot>
        <tr>
            <th colspan="2">
                Messages load for user @fullname
            </th>
        </tr>
        </tfoot>
    </table>
}
else
{
    <p class="text-light">There has been no message for user @fullname</p>
}
<hr class="mt-2 mb-2"/>
<div class="row">
    <div id="messages"></div>
</div>

@section Scripts
{
    <script type="application/javascript">
     document.addEventListener('DOMContentLoaded', function () {
                    const statsConnection = new signalR.HubConnectionBuilder()
                                .withUrl('/alerts')                                
                                .build();
                    bindConnectionMessage(statsConnection);
                    statsConnection.start()
                              .then(() => onConnected(statsConnection))
                              .catch(console.error);
                    
                    $("#btnClear").click(function (event) {
                                    $("#messages").empty();
                                    event.preventDefault();
                    });
                    
                    function createMessageEntry(encodedMsg) {
                                    let entry = document.createElement('div');                            
                                    entry.innerHTML = 
                                    '<div class="col-md-12 shadow-sm p-3 mb-5 bg-white rounded pull-left">' +
                                     encodedMsg +'</div>';                          
                                    return entry;
                                }
                    
                    function bindConnectionMessage(connection) {
                          let messageCallback = function (message) {
                                        if (!message) return;                                
                                        let messageEntry = createMessageEntry(message);
                                        let messageBox = document.getElementById('messages');
                                        messageBox.appendChild(messageEntry);
                                        messageBox.scrollTop = messageBox.scrollHeight;
                          };
                          connection.on('alertMessage', messageCallback); 
                    }
                                    
                    function onConnected(connection) {
                            $("#messages").empty();
                            console.log('connection started');
                            connection.send('alertMessage', 'Connected to real-time messages retrieving');                                          
                    }
                });
    </script>
}